AWSTemplateFormatVersion: 2010-09-09

Description: >-
  AWS SAM template used to deploy a TypeScript backend with Webpack

Transform:
  - AWS::Serverless-2016-10-31

Parameters:
  ApiStageName:
    Type: String
    Description: The name of the stage, which API Gateway uses as the first path segment in the invoke Uniform Resource Identifier (URI).
    Default: dev
  ApiVersion:
    Type: String
    Description: The version identifier of the API documentation snapshot.
    Default: 1.0.0
  AutoPublishAlias:
    Type: String
    Description: Name of the Lambda alias.
    Default: live

Globals:
  Api:
    EndpointConfiguration:
      Type: REGIONAL
    OpenApiVersion: 3.0.3
    TracingEnabled: true
    Auth:
      DefaultAuthorizer: CognitoAuthorizer
      Authorizers:
        CognitoAuthorizer:
          UserPoolArn: !GetAtt ApplicationUserPool.Arn
          AuthType: COGNITO_USER_POOLS
          Identity:
            Header: Authorization
          AuthorizationScopes:
            - !Sub ${ApplicationUserPoolResourceServer}/api_access
  Function:
    Runtime: nodejs12.x
    Handler: dist/app.handler
    MemorySize: 128
    Timeout: 3
    AutoPublishAlias: !Ref AutoPublishAlias
    Tracing: Active
    Environment:
      Variables:
        REGION: !Ref AWS::Region
    Layers:
      - !Ref ApplicationLayer

Resources:
  ApplicationKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action: kms:*
            Resource: '*'

  ApplicationKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      TargetKeyId: !Ref ApplicationKey
      AliasName: !Sub alias/${AWS::StackName}

  ApplicationUserPool:
    Type: AWS::Cognito::UserPool

  ApplicationUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref ApplicationUserPool
      Domain: !Ref AWS::StackName

  ApplicationUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref ApplicationUserPool
      GenerateSecret: true
      AllowedOAuthFlows:
        - client_credentials
      AllowedOAuthScopes:
        - !Sub ${ApplicationUserPoolResourceServer}/api_access
      ExplicitAuthFlows:
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      AllowedOAuthFlowsUserPoolClient: true

  ApplicationUserPoolResourceServer:
    Type: AWS::Cognito::UserPoolResourceServer
    Properties:
      UserPoolId: !Ref ApplicationUserPool
      Name: !Sub ${AWS::StackName}-ResourceServer
      Identifier: !Sub ${AWS::StackName}-ResourceServer
      Scopes:
        - ScopeName: api_access
          ScopeDescription: Scope for API access

  CustomerApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref ApiStageName
      DefinitionBody: !Transform { Name: AWS::Include, Parameters: { Location: openapi/customer.yaml } }

  CustomerApiDocumentation:
    Type: AWS::ApiGateway::DocumentationVersion
    Properties:
      RestApiId: !Ref CustomerApi
      DocumentationVersion: !Ref ApiVersion

  CustomerTable:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
        - AttributeName: partitionKey
          KeyType: HASH
        - AttributeName: sortKey
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: partitionKey
          AttributeType: S
        - AttributeName: sortKey
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      SSESpecification:
        SSEEnabled: true
        SSEType: KMS
        KMSMasterKeyId: !Ref ApplicationKey

  ApplicationLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      Description: Application layer
      ContentUri: layers/application-layer
      CompatibleRuntimes:
        - nodejs12.x
      RetentionPolicy: Delete
    Metadata:
      BuildMethod: nodejs12.x

  CreateCustomerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Create customer function
      CodeUri: functions/create-customer-function
      Environment:
        Variables:
          CUSTOMER_TABLE_NAME: !Ref CustomerTable
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref CustomerTable
        - KMSDecryptPolicy:
            KeyId: !Ref ApplicationKey
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref CustomerApi
            Path: /customers
            Method: post

  GetCustomerByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Get customer by ID function
      CodeUri: functions/get-customer-by-id-function
      Environment:
        Variables:
          CUSTOMER_TABLE_NAME: !Ref CustomerTable
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref CustomerTable
        - KMSDecryptPolicy:
            KeyId: !Ref ApplicationKey
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref CustomerApi
            Path: /customers
            Method: post

Outputs:
  StackName:
    Description: Stack name
    Value: !Ref AWS::StackName
  StackArn:
    Description: Stack ARN
    Value: !Ref AWS::StackId
  StackRegion:
    Description: Stack region
    Value: !Ref AWS::Region

  ApplicationKeyId:
    Description: Application KMS key ID
    Value: !Ref ApplicationKey
  ApplicationKeyArn:
    Description: Application KMS key ARN
    Value: !GetAtt ApplicationKey.Arn
  ApplicationKeyAlias:
    Description: Application KMS key alias
    Value: !Ref ApplicationKeyAlias

  CustomerApiId:
    Description: Customer API ID
    Value: !Ref CustomerApi
  CustomerApiUrl:
    Description: Customer API URL
    Value: !Sub https://${CustomerApi}.execute-api.${AWS::Region}.amazonaws.com/${ApiStageName}/

  CustomerTableName:
    Description: Customer table name
    Value: !Ref CustomerTable
  CustomerTableArn:
    Description: Customer table ARN
    Value: !GetAtt CustomerTable.Arn

  ApplicationLayerArn:
    Description: Application layer ARN
    Value: !Ref ApplicationLayer

  CreateCustomerFunctionName:
    Description: Create customer function name
    Value: !Ref CreateCustomerFunction
  CreateCustomerFunctionArn:
    Description: Create customer function ARN
    Value: !GetAtt CreateCustomerFunction.Arn

  GetCustomerByIdFunctionName:
    Description: Get customer by ID function name
    Value: !Ref GetCustomerByIdFunction
  GetCustomerByIdFunctionArn:
    Description: Get customer by ID function ARN
    Value: !GetAtt GetCustomerByIdFunction.Arn
